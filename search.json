[{"path":[]},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement fozy81@hotmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://fozy81.github.io/opendatascot/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://fozy81.github.io/opendatascot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 opendatascot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fozy81.github.io/opendatascot/articles/basic-usage.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Basic Example","text":"good place start browsing datasets opendata.scot. can filter search find datasets interests. openscotland R package can download save datasets interested . helps quickly start analysis without needing work save, organise import data R.","code":""},{"path":"https://fozy81.github.io/opendatascot/articles/basic-usage.html","id":"search","dir":"Articles","previous_headings":"","what":"Search","title":"Basic Example","text":"opendatascotland package basic search function finding available datasets viewing metadata. Use ods_search() function view metadata datasets filter matching search terms dataset’s title. Note, search term case-insensitive word order must correct (‘fuzzy’ matching).","code":"library(opendatascotland) # View all available datasets and associated metadata all_datasets <- ods_search()  # Search dataset titles containing matching terms (case insensitive) single_query <- ods_search(\"Number of bikes\")  # Search multiple terms multi_query <- ods_search(c(\"Bins\", \"Number of bikes\")) head(multi_query) #> # A tibble: 6 × 11 #>   unique_id            title organization notes category url   resources licence #>   <chr>                <chr> <chr>        <chr> <list>   <chr> <list>    <chr>   #> 1 Salt_Bins_Dumfries_… Salt… Dumfries an… \"<p>… <chr>    /dat… <df>      UK Ope… #> 2 Public_Litter_Bins_… Publ… Dundee City… \"<p>… <chr>    /dat… <df>      UK Ope… #> 3 Solar_Powered_Compa… Sola… Dundee City… \"<p>… <chr>    /dat… <df>      Open D… #> 4 Number_of_bikes_ava… Numb… Cycling Sco… \"<p>… <chr>    /dat… <df>      UK Ope… #> 5 Number_of_bikes_ava… Numb… Cycling Sco… \"<p>… <chr>    /dat… <df>      UK Ope… #> 6 Number_of_bikes_ava… Numb… Cycling Sco… \"<p>… <chr>    /dat… <df>      Creati… #> # ℹ 3 more variables: date_created <chr>, date_updated <chr>, org_type <chr>"},{"path":"https://fozy81.github.io/opendatascot/articles/basic-usage.html","id":"download","dir":"Articles","previous_headings":"","what":"Download","title":"Basic Example","text":"Currently, datasets available .csv, json .geojson can downloaded. formats cover majority data available. warned dataset can’t downloaded. download data, can either download metadata using ods_search(), pass data frame ods_get() use search argument ods_get(search=\"search term\") search download matching datasets one step. default, asked want save data locally first download. Optionally, can refresh data avoid asked save data.","code":"query <- ods_search(\"bins\") data <- ods_get(query) data <- ods_get(search = \"bins\") data <- ods_get(search = \"Number of bikes\", refresh = TRUE, ask = FALSE)"},{"path":"https://fozy81.github.io/opendatascot/articles/basic-usage.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Basic Example","text":"downloaded dataset(s), may wish plot map data. ’s short example plotting can done. ods_get() function returned named list data frames - lets select one want name: alternatively select first data frame list using index 1. Geojson datasets automating converted simple feature ‘sf’ data. can see example data frame classed “sf” means spatial / geometry attributes baked . can see geometry variable contains spatial co-ordinates. allows plot() function automatically plot coordinates.","code":"data <- ods_get(search = \"Recycling Point Locations\") recycling_points <- data$Recycling_Point_Locations_Dundee_City_Council recycling_points <- data[[1]] class(recycling_points) #> [1] \"sf\"         \"data.frame\" plot(recycling_points$geometry, col = as.factor(recycling_points$LOCATION))"},{"path":"https://fozy81.github.io/opendatascot/articles/basic-usage.html","id":"json","dir":"Articles","previous_headings":"Plot","what":"JSON","title":"Basic Example","text":"data available JSON CSV formats automatically spatial geometry. example, Glasgow cycling counts latitude longitude variables downloaded JSON therefore spatial geometry added default. type data converted data frame. Let’s download Glasgow cycle counts data available JSON format. can see cycle count JSON converted ‘flat’ tabulated data frame. data frame can now plotted chart, following example, let’s use ggplot2 plotting library create graph. ’ll display counts time location.  bit noisy lets sum counts locations see total cycle counts.  can also use latitude longitude columns plot points map.  Can guess points Glasgow popular cyclists? can add base layer map reveal streets.  Looks like Tradeston area hot spot cyclists.","code":"cycle_count <- ods_get(search = \"lasgow City Council - Daily cycling counts from automatic cycling counters\") cycle_count <- cycle_count[[1]] cycle_count #> # A tibble: 1,000 × 10 #>    provider     area  siteID location latitude longitude startTime endTime count #>  * <chr>        <chr> <chr>  <chr>       <dbl>     <dbl> <chr>     <chr>   <int> #>  1 Glasgow Cit… Glas… GLG00… Trongate     55.9     -4.24 2020-10-… 2020-1…     0 #>  2 Glasgow Cit… Glas… GLG00… Tradest…     55.9     -4.26 2019-11-… 2019-1…   738 #>  3 Glasgow Cit… Glas… GLG02… Scotlan…     55.8     -4.27 2020-11-… 2020-1…     0 #>  4 Glasgow Cit… Glas… GLG01… CP Sauc…     55.9     -4.28 2019-11-… 2019-1…   133 #>  5 Glasgow Cit… Glas… GLG02… Scotlan…     55.8     -4.27 2020-10-… 2020-1…     0 #>  6 Glasgow Cit… Glas… GLG00… Albert …     55.9     -4.25 2020-01-… 2020-0…   205 #>  7 Glasgow Cit… Glas… GLG01… Berkele…     55.9     -4.28 2020-01-… 2020-0…     0 #>  8 Glasgow Cit… Glas… GLG00… Clyde T…     55.9     -4.33 2020-01-… 2020-0…    45 #>  9 Glasgow Cit… Glas… GLG00… Albert …     55.9     -4.25 2019-12-… 2019-1…   168 #> 10 Glasgow Cit… Glas… GLG02… Garscub…     55.9     -4.26 2020-10-… 2020-1…     0 #> # ℹ 990 more rows #> # ℹ 1 more variable: usmart_id <chr> library(ggplot2) # Convert character to date (to display date time correctly) cycle_count$Date <- as.Date(cycle_count$startTime) # Plot ggplot(cycle_count, aes(x = Date, y = count, colour = as.factor(location))) +   geom_line() +   theme_minimal() +   theme(legend.position = \"none\") library(ggplot2) library(dplyr) library(magrittr)  # Group by date and sum the count sum_cycle_count <- cycle_count %>%   group_by(Date) %>%   summarise(`Total Count` = sum(count)) #  Graph the new `sum_count` variable ggplot(sum_cycle_count, aes(x = Date, y = `Total Count`)) +   geom_line(colour = \"blue\") +   theme_minimal() library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE # Convert data frame into 'sf' geospatial dataframe cycle_counts_geo <- st_as_sf(cycle_count, coords = c(\"longitude\", \"latitude\")) # Sum counts by location cycle_counts_geo_sum <- cycle_counts_geo %>%   group_by(location) %>%   summarise(`Total Cycle Count` = sum(count)) # plot c <- ggplot(cycle_counts_geo_sum) +   geom_sf(aes(size = `Total Cycle Count`), colour = \"blue\", fill = NA) +   theme_minimal() c library(ggmap) library(purrr)  # Create bounding box to download background street map layer bbox_glasgow <- map_dbl(st_bbox(cycle_counts_geo_sum), 1) names(bbox_glasgow) <- c(\"left\", \"bottom\", \"right\", \"top\")  # Download background layer glasgow <- suppressMessages(ggmap(get_stamenmap(bbox_glasgow, zoom = 14)))  # Plot background with cycle counts on top cycle_map <- glasgow + geom_point(   data = cycle_counts_geo_sum,   aes(     x = unlist(map(geometry, 1)),     y = unlist(map(geometry, 2)),     size = `Total Cycle Count`   ),   col = \"green\",   pch = 16,   alpha = 0.4 ) +   theme_minimal() +   theme(     axis.title = element_blank(),     axis.text = element_blank()   )   cycle_map"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Riding a Bike","text":"Let’s take look Glasgow bike hire trip data. First, load libraries ’ll need analysis. Note, may need install first.","code":"# You may need to install packages # Install `devtools`:  install.packages(\"devtools\") # Install `opendatascotland`: devtools::install_github(\"fozy81/opendatascot\") library(opendatascotland) library(av) library(sf) library(tidyverse) library(ggmap) library(hms) library(data.table) library(lubridate) library(knitr) library(sfheaders) library(gganimate) library(transformr) library(ggplot2)"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"meta-data","dir":"Articles","previous_headings":"","what":"Meta-data","title":"Riding a Bike","text":"Search opendata.scot meta-data Glasgow Next Bike Cycle Hire trips, describes data provides . Also can confirm open data licence used.","code":"# Search and download metadata <- ods_search(search = \"Next Bike Cycle Hire - Glasgow\") metadata$licence >> [1] \"UK Open Government Licence v3.0\""},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"download","dir":"Articles","previous_headings":"","what":"Download","title":"Riding a Bike","text":"Using meta-data, can download raw cycle trips data directly provider save computer future (quick) reference.","code":"trips <- ods_get(metadata) # Data is returned as a list of data frames, extract first data frame in the # list. trips <- trips[[1]]"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"stats","dir":"Articles","previous_headings":"","what":"Stats","title":"Riding a Bike","text":"’ll get summary stats help us understand data. Median trip duration around: 14 mins Top 3 start locations: Top 3 return locations:","code":"median_duration <- paste(round(median(trips$Duration) / 60), \"mins\") trips %>%   group_by(`Rental place`) %>%   summarise(count = n()) %>%   arrange(-count) %>%   head(3) %>%   kable(., format = \"simple\", align = \"c\") trips %>%   group_by(`Return place`) %>%   summarise(count = n()) %>%   arrange(-count) %>%   head(3) %>%   kable(., format = \"simple\", align = \"c\")"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"start-time","dir":"Articles","previous_headings":"Stats","what":"Start Time","title":"Riding a Bike","text":"plot trip start times 24hrs. Looks expected: Peaks morning rush hours 7.30-9.30 evening around 6pm. Quiet 4am.","code":"# Start time of day (hour) trips$hour <- hour(trips$`Start time`) # ggplot bar chart hour_plot <- trips %>%   ggplot(aes(x = hour)) +   geom_bar(aes(fill = ..count..)) +   scale_fill_gradient(low = \"pink\", high = \"blue\") +   theme_minimal() hour_plot"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"annual-monthly-usage","dir":"Articles","previous_headings":"Stats","what":"Annual monthly usage","title":"Riding a Bike","text":"can see significant usage winter almost doubling usage summer months. Although, usage 2022 looks little unusual.","code":"# Extract year (as character to help plot as discrete categories in chart) trips$year <- as.character(year(trips$`Start time`)) # Extract month as abbreviated 'Aug'... trips$month <- lubridate::month(trips$`Start time`, abbr = TRUE, label = TRUE) # Plot bar chart month_plot <- trips %>%   ggplot(aes(x = month)) +   geom_bar(aes(fill = year)) +   theme_minimal() month_plot"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"map-trip-start-points","dir":"Articles","previous_headings":"Stats","what":"Map trip start points","title":"Riding a Bike","text":"plot start location using background map data OpenStreetMap. can see bike hire trips used widely across city. ’s strange lat/lon start points need filtered . sure explains filter bounding box around Glasgow helps.","code":"# Clean out weird points: # View the outliers like this: hist(trips$`START LAT`) trips <- trips %>%   filter(!is.na(`START LAT`) &     !is.na(`START LONG`) &     `START LAT` < 55.9 &     `START LAT` > 55.8 &     `START LONG` < -4.0 &     `START LONG` > -4.4)"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"map","dir":"Articles","previous_headings":"Stats > Map trip start points","what":"Map","title":"Riding a Bike","text":"","code":"# Convert data frame into 'sf' geospatial dataframe trips <- st_as_sf(trips, coords = c(\"START LONG\", \"START LAT\"))  # Bounding box for background map bbox <- map_dbl(st_bbox(trips), 1) names(bbox) <- c(\"left\", \"bottom\", \"right\", \"top\")  # Download background map using bounding box map <- suppressMessages(ggmap(get_stamenmap(bbox, zoom = 12)))  # Plot background with trips start points on top cycle_map <- map + geom_point(   data = trips,   aes(     x = unlist(map(geometry, 1)),     y = unlist(map(geometry, 2))   ),   colour = \"hotpink1\",   pch = 16,   size = 0.5,   alpha = 0.3 ) +   theme_minimal() +   theme(     axis.title = element_blank(),     axis.text = element_blank()   ) + facet_wrap(vars(year)) cycle_map"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"start-and-end-trips","dir":"Articles","previous_headings":"Stats","what":"Start and End Trips","title":"Riding a Bike","text":"Let’s explore trips start finish different location. may give insight lengths journeys taken. ignore trips started ended place, can’t tell far went. Remove points missing data Remove points outside Glasgow area Remove trips start end point","code":"trips <- ods_get(metadata) #> 'Next Bike Cycle Hire - Glasgow Trip Data (2017-2023)' dataset was last downloaded on 2023-05-15 trips <- trips[[1]] trips <- trips %>%   filter(!is.na(`START LAT`) &     !is.na(`START LONG`) &     !is.na(`END LAT`) &     !is.na(`END LONG`) &     `START LAT` < 55.9 &     `START LAT` > 55.8 &     `START LONG` < -4.1 &     `START LONG` > -4.4 &     `END LAT` < 55.9 &     `END LAT` > 55.8 &     `END LONG` < -4.1 &     `END LONG` > -4.4 &     `END LONG` != `START LONG` &     `END LAT` != `START LAT`) trips <- arrange(trips, `Start time`) trips$week <- week(trips$`Start time`) trips$month <- month(trips$`Start time`) trips$year <- year(trips$`Start time`) trips$month <- str_pad(trips$month, pad = 0, width = 2) trips$week <- str_pad(trips$week, pad = 0, width = 2) trips$year_month <- as.integer(paste0(trips$year, trips$month)) trips$year_week <- as.integer(paste0(trips$year, trips$week)) trips <- mutate(trips, arrival_month = seq_len(nrow(trips))) trips <- rename(trips,   start_long = `START LONG`,   start_lat = `START LAT`,   finish_long = `END LONG`,   finish_lat = `END LAT` ) trips$id <- seq_len(nrow(trips))"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"distance","dir":"Articles","previous_headings":"Stats","what":"Distance","title":"Riding a Bike","text":"Summarize average ‘crow flies’ trip distances: Max distance: 13719m Min distance: 0.13m (!) Average distance: 1962m","code":"data <- trips # Use this to reduce data to make it run fast / # less RAM needed: data <- data %>% filter(year_month < 201711) setDT(data) data[, line_id := .I] ## Each row is a line ## create a long-form of the data dt_line <- rbindlist(   list(     data[, .(arrival_month,       year_month,       line_id,       lon = start_long,       lat = start_lat, sequence = 1     )],     data[, .(arrival_month,       year_month,       line_id,       lon = finish_long,       lat = finish_lat,       sequence = 2     )]   ) ) setorder(dt_line, line_id, sequence) sf <- sfheaders::sf_multilinestring(   obj = dt_line,   x = \"lon\",   y = \"lat\",   multilinestring_id = \"arrival_month\",   linestring_id = \"line_id\",   keep = TRUE ) sf::st_crs(sf) <- 4326 ## Assume it's in Web Mercator"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"map-1","dir":"Articles","previous_headings":"","what":"Map","title":"Riding a Bike","text":"plot trips straight line.","code":"# g <- ggplot() +   geom_sf(data = sf, mapping = aes(colour = year_month), show.legend = FALSE) +   lims(x = c(4.4, 4.1), y = c(55.8, 55.9)) +   labs(title = \"All Trips\") g"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"animation","dir":"Articles","previous_headings":"Map","what":"Animation","title":"Riding a Bike","text":"Plotting lines blocks covers many lines, let’s animate trips taken.  still ends looking like blob colour…","code":"steps <- seq(from = 1000, to = 664586, by = floor(nrow(sf) / 10)) sf$year <- year(trips$`Start time`) names(steps) <- seq_along(length(steps)) make_plot <- function() {   map(steps, function(step) {     data <- sf[1:step, ]     g <- ggplot() +       geom_sf(         data = data, mapping = aes(           colour = data$arrival_month,           alpha = 0.9         ),         show.legend = FALSE       ) +       lims(x = c(4.4, 4.1), y = c(55.8, 55.9)) +       ggtitle(max(data$year)) +       theme_void() +       theme(         plot.background = element_rect(fill = \"black\", color = \"black\"),         plot.title = element_text(           color = \"purple\",           size = 14,           face = \"bold\",           hjust = 0.5,           vjust = 0         )       ) +       scale_colour_gradient(low = \"blue\", high = \"violet\", trans = \"reverse\")     print(g)   }) } video_file <- file.path(tempdir(), \"output.gif\") av::av_capture_graphics(make_plot(),   video_file,   512,   480,   vfilter = \"framerate=fps=4\" )"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"routes","dir":"Articles","previous_headings":"","what":"Routes","title":"Riding a Bike","text":"Let’s take start end point trip use route planning engine provide line. route plan uses cycle network, avoiding busy roads. NOTE: requires Open Source Routing Machine (OSRM) library installed locally. Please follow link install. Additionally, OpenStreetMap data Scotland needs downloaded add OSRM. Running code may take many days!…","code":"# loop through sf and find a route from osrm... steps <- seq(from = 1000, to = 664586, by = floor(nrow(trips) / 500))  purrr::map_df(split(trips, trips$id), function(trip) {   message(trip$id) # 249534 last id saved.   url <- paste0(     \"http://127.0.0.1:5000/route/v1/bicycle/\",     trip$start_long, \",\", trip$start_lat, \";\",     trip$finish_long, \",\", trip$finish_lat,     \"?steps=false&geometries=geojson\"   )   route <- readLines((curl::curl(url)))    route <- jsonlite::fromJSON(route)   json_route <- jsonlite::toJSON(route$routes$geometry)   # Need to remove '[' bracket at start and end of json.   json_route <- substr(json_route, start = 2, stop = nchar(json_route) - 1)   geo <- st_read(json_route, quiet = TRUE)   st_write(geo, \"trips.geojson\", append = TRUE, quiet = TRUE) })"},{"path":"https://fozy81.github.io/opendatascot/articles/riding-a-bike.html","id":"animate-routes","dir":"Articles","previous_headings":"Routes","what":"Animate Routes","title":"Riding a Bike","text":"section requires ffmpeg system library installed give fine control generating gif mpegs videos. resulting animations shows shortest routes cyclists may use travel B using cycle network. course, people hiring bikes may chosen different route gives idea transport network Glasgow used hiring bikes.","code":"routes <- st_read(\"trips.geojson\") trips$day <- day(trips$`Start time`) trips$day <- str_pad(trips$day, pad = 0, width = 2) trips$year_day <- as.integer(paste0(trips$year, trips$week, trips$day))  map_routes3 <- bind_cols(routes, trips[seq_len(nrow(routes)), ]) map_routes3$lat_1 <- seq(   from = -4.29202,   to = -4.4,   by = -((-4.26202 - -4.4) / nrow(routes)) )[seq_len(nrow(routes))] map_routes3$lat_2 <- seq(   from = -4.21866,   to = -4.1,   by = -((-4.24866 - -4.1) / nrow(routes)) )[seq_len(nrow(routes))] map_routes3$lon_3 <- seq(   from = 55.8347,   to = 55.8,   by = -((55.8647 - 55.7) / nrow(routes)) )[seq_len(nrow(routes))] map_routes3$lon_4 <- seq(   from = 55.8966,   to = 55.9,   by = -((55.8666 - 55.9) / nrow(routes)) )[seq_len(nrow(routes))]  steps <- trips[seq_len(nrow(routes)), ] %>%   group_by(year_day) %>%   summarise(steps = max(id)) steps$id <- seq_len(nrow(steps)) plots <- map(split(steps, steps$id), function(step) {   n <- step$id   message(n)   data <- map_routes3[1:step$steps, ]   lat_1 <- min(data$lat_1)   lat_2 <- max(data$lat_2)   lon_1 <- min(data$lon_3)   lon_2 <- max(data$lon_4)   g <- ggplot() +     geom_sf(       data = data, mapping = aes(         colour = arrival_month,         alpha = 0.9       ),       show.legend = FALSE     ) +     # Fixed lat/lon:     # lims(x = c(4.4, 4.1), y = c(55.8, 55.9)) +     # Dynamic lat/lon:     lims(x = c(lat_1, lat_2), y = c(lon_1, lon_2)) +     ggtitle(max(data$year)) +     theme_void() +     theme(       plot.background = element_rect(fill = \"black\", color = \"black\"),       plot.title = element_text(         color = \"purple\",         size = 14,         face = \"bold\",         hjust = 0.5,         vjust = 0       )     ) +     scale_colour_gradient(low = \"blue\", high = \"violet\", trans = \"reverse\")   return(g) })  n <- 1 map(plots[1:715], function(plot) {   ggsave(paste0(\"routes/\", n, \".png\"),     plot = plot,     width = 5,     height = 4   )   n <<- n + 1   message(n) })  # Use ffmpeg system / command line library: # ffmpeg -f image2 -framerate 15 -i 'routes/%d.png' -vcodec libx264 # -crf 22 video.mp4 # ffmpeg -i video.mp4 -r 4 -s 512x420 output.gif"},{"path":"https://fozy81.github.io/opendatascot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Foster. Author, maintainer.","code":""},{"path":"https://fozy81.github.io/opendatascot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Foster T (2023). opendatascotland: Download data OpenData.Scot. R package version 0.2.0, https://fozy81.github.io/opendatascot/.","code":"@Manual{,   title = {opendatascotland: Download data from OpenData.Scot},   author = {Tim Foster},   year = {2023},   note = {R package version 0.2.0},   url = {https://fozy81.github.io/opendatascot/}, }"},{"path":"https://fozy81.github.io/opendatascot/index.html","id":"opendatascotland","dir":"","previous_headings":"","what":"Download data from OpenData.Scot","title":"Download data from OpenData.Scot","text":"opendatascotland R package download locally cache data amazing opendata.scot website. helps quickly start data analysis providing simple way save, organise import data R.","code":""},{"path":"https://fozy81.github.io/opendatascot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download data from OpenData.Scot","text":"can install development version opendatascotland GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"fozy81/opendatascot\")"},{"path":"https://fozy81.github.io/opendatascot/index.html","id":"search","dir":"","previous_headings":"","what":"Search","title":"Download data from OpenData.Scot","text":"Search available datasets using ods_search() function. Additionally, use search argument query datasets title. Note, search term case-insensitive word order must correct (‘fuzzy’ matching).","code":"library(opendatascotland) # View all available datasets and associated metadata all_datasets <- ods_search()  # Search dataset titles containing matching terms (case insensitive) single_query <- ods_search(\"Number of bikes\")  # Search multiple terms multi_query <- ods_search(c(\"Bins\", \"Number of bikes\")) head(multi_query, 3) #> # A tibble: 3 × 11 #>   unique_id            title organization notes category url   resources licence #>   <chr>                <chr> <chr>        <chr> <list>   <chr> <list>    <chr>   #> 1 Salt_Bins_Dumfries_… Salt… Dumfries an… \"<p>… <chr>    /dat… <df>      UK Ope… #> 2 Public_Litter_Bins_… Publ… Dundee City… \"<p>… <chr>    /dat… <df>      UK Ope… #> 3 Solar_Powered_Compa… Sola… Dundee City… \"<p>… <chr>    /dat… <df>      Open D… #> # ℹ 3 more variables: date_created <chr>, date_updated <chr>, org_type <chr>"},{"path":"https://fozy81.github.io/opendatascot/index.html","id":"download","dir":"","previous_headings":"","what":"Download","title":"Download data from OpenData.Scot","text":"Currently, datasets available .csv, .json .geojson can downloaded. formats cover majority data available. warned data can’t downloaded. download data, can either download metadata using ods_search(), pass data frame ods_get() use search argument ods_get(search = \"search term\") search download matching datasets one step. default, asked want save data locally first download. Optionally, can refresh data avoid asked save data. ods_get() function returns named list data frames Select dataset name. alternatively select data frame list position number. Geojson datasets automating converted simple feature ‘sf’ data. helps make geospatial data easier handle R. can see example data frame classed “sf” means spatial / geometry coordinates held geometry column. allows plot() function automatically plot coordinates geometry column.","code":"query <- ods_search(\"Public Litter Bins\") data <- ods_get(query) data <- ods_get(search = \"Public Litter Bins\") data <- ods_get(search = \"Number of bikes\", refresh = TRUE, ask = FALSE) data <- ods_get(search = c(\"Public Litter Bins\", \"Public Litter Bins\")) names(data) [1] \"Public_Litter_Bins_Dundee_City_Council\"        [2] \"Recycling_Point_Locations_Dundee_City_Council\" recycling_points <- data$Recycling_Point_Locations_Dundee_City_Council recycling_points <- data[[2]] class(recycling_points) #> [1] \"sf\"         \"data.frame\" plot(recycling_points[, \"GLASS\"])"},{"path":"https://fozy81.github.io/opendatascot/reference/ods_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data From Open Data Scotland — ods_get","title":"Get Data From Open Data Scotland — ods_get","text":"Return data https://opendata.scot/ website. Currently, datasets CSV, JSON GeoJSON formats supported. data available formats, warning provided. default data saved locally avoid re-downloading subsequent requests.","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data From Open Data Scotland — ods_get","text":"","code":"ods_get(data = NULL, search = NULL, refresh = FALSE, ask = TRUE)"},{"path":"https://fozy81.github.io/opendatascot/reference/ods_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data From Open Data Scotland — ods_get","text":"data Dataframe ods_search() default (NULL), download datasets. search Search term(s) data parameter provided. refresh Refresh cached data. data changed remotely, use update renew corrupted data/cache. download data update cache. ask FALSE, user prompted input download data. useful automate data downloads cache updated, speed-process downloading many datasets .","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data From Open Data Scotland — ods_get","text":"list named data frames. GeoJSON data converted simple features sf class aid spatial analysis.","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Data From Open Data Scotland — ods_get","text":"","code":"search <- ods_search(\"bins\") data <- ods_get(search, refresh = TRUE, ask = FALSE) #> Creating directory to hold opendatascot data at ~/.local/share/opendatascot #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Saving to opendatascot data directory at ~/.local/share/opendatascot #> Saving to opendatascot data directory at ~/.local/share/opendatascot"},{"path":"https://fozy81.github.io/opendatascot/reference/ods_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Open Data Scot Datasets — ods_search","title":"Search Open Data Scot Datasets — ods_search","text":"function return metadata associated datasets available opendata.scot","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Open Data Scot Datasets — ods_search","text":"","code":"ods_search(search = \"\")"},{"path":"https://fozy81.github.io/opendatascot/reference/ods_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Open Data Scot Datasets — ods_search","text":"search vector search terms. Searches performed title datasets case insensitive. search terms provided, metadata datasets returned.","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Open Data Scot Datasets — ods_search","text":"dataframe metadata available datasets (matching search term provided).","code":""},{"path":"https://fozy81.github.io/opendatascot/reference/ods_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Open Data Scot Datasets — ods_search","text":"","code":"all_datasets <- ods_search() # return ALL datasets data <- ods_search(search = \"bicycle\") # search datasets data <- ods_search(search = c(\"bicycle\",\"bins\")) # multiple search terms"}]
